package com.service_kluch.objects.attachments

sealed interface Attachment {
    data class Audio (
        /*Аудиозапись
        Объект, описывающий аудиозапись, содержит следующие поля:*/
        val id: Int = 0,
        /*Идентификатор аудиозаписи.*/
        val owner_id: Int = 0,
        /*Идентификатор владельца аудиозаписи.*/
        val artist: String = "",
        /*Исполнитель.*/
        val title: String = "",
        /*Название композиции.*/
        val duration: Int = 0,
        /*Длительность аудиозаписи в секундах.*/
        val url:String = "",
        /*Ссылка на mp3.*/
        val lyrics_id: Int = 0,
        /*Идентификатор текста аудиозаписи (если доступно).*/
        val album_id: Int = 0,
        /*Идентификатор альбома, в котором находится аудиозапись (если присвоен).*/
        val genre_id: Int = 0,
        /*Идентификатор жанра из списка аудио жанров.*/
        val date: Int = 0,
        /*Дата добавления.*/
        val no_search: Boolean = true,
        /*1, если включена опция «Не выводить при поиске».
        Если опция отключена, поле не возвращается.*/
        val is_hq: Boolean = false
        /*1, если аудио в высоком качестве.*/
    ):Attachment
    data class Doc (
        /*Объект, описывающий файл, содержит следующие поля:*/
        val id: Int = 0,
        /*Идентификатор файла.*/
        val owner_id: Int = 0,
        /*Идентификатор пользователя, загрузившего файл.*/
        val title: String = "",
        /*Название файла.*/
        val size: Int = 0,
        /*Размер файла в байтах.*/
        val ext: String = "",
        /*Расширение файла.*/
        val url: String = "",
        /*Адрес файла, по которому его можно загрузить.*/
        val date: Int = 0,
        /*Дата добавления в формате Unixtime.*/
        val type: Int = 0,
        /*Тип файла.  Возможные значения:
        1 — текстовые документы;
        2 — архивы;
        3 — gif;
        4 — изображения;
        5 — аудио;
        6 — видео;
        7 — электронные книги;
        8 — неизвестно.*/
        val preview: Preview? = null
        /*Информация для предварительного просмотра файла.*/
    ):Attachment
    data class Note (
        /*Объект, описывающий заметку, содержит следующие поля:*/
        val id: Int = 0,
        /*Идентификатор заметки.*/
        val owner_id: Int = 0,
        /*Идентификатор владельца заметки.*/
        val title: String = "",
        /*Заголовок заметки.*/
        val text: String = "",
        /*Текст заметки.*/
        val date: Int = 0,
        /*Дата создания заметки в формате Unixtime.*/
        val comments: Int = 0,
        /*Количество комментариев.*/
        val read_comments: Int = 0,
        /*Количество прочитанных комментариев (только при запросе информации о заметке текущего пользователя).*/
        val view_url: String = "",
        /*URL страницы для отображения заметки.*/
        val privacy_view: String = "",
        /*Настройки приватности комментирования заметки*/
        val can_comment: Boolean= false,
        /*Есть ли возможность оставлять комментарии*/
        val text_wiki: String = ""
        /*Тэги ссылок на wiki*/
    ):Attachment
    data class Photo (
        /*Объект, описывающий фотографию, содержит следующие поля:*/
        val id: Int = 0,
        /*Идентификатор фотографии.*/
        val album_id: Int = 0,
        /*Идентификатор альбома, в котором находится фотография.*/
        val owner_id: Int = 0,
        /*Идентификатор владельца фотографии.*/
        val user_id: Int = 0,
        /*Идентификатор пользователя, загрузившего фото
        (если фотография размещена в сообществе).
        Для фотографий, размещенных от имени сообщества, user_id = 100.*/
        val text: String = "",
        /*Текст описания фотографии.*/
        val date: Int = 0,
        /*Дата добавления в формате Unixtime.*/
        val sizes: Array<CopyImage>,
        /*Массив с копиями изображения в разных размерах.*/
        val width: Int = 0,
        /*Ширина оригинала фотографии в пикселах.*/
        val height: Int = 0
        /*Высота оригинала фотографии в пикселах.*/
    ):Attachment
    data class Video (
        /*Видеозапись
        Объект, описывающий видеозапись, содержит следующие поля:*/
        val id: Int = 0,
        /*Идентификатор видеозаписи.*/
        val owner_id: Int = 0,
        /*Идентификатор владельца видеозаписи.*/
        val title: String = "",
        /*Название видеозаписи.*/
        val description: String = "",
        /*Текст описания видеозаписи.*/
        val duration: Int = 0,
        /*Длительность ролика в секундах.*/
        val image: Array<ImageCover>,
        /*Изображение обложки.*/
        val first_frame: Array<ImageFirsFrame>,
        /*Изображение первого кадра. */
        val date: Int = 0,
        /*Дата создания видеозаписи в формате Unixtime.*/
        val adding_date: Int = 0,
        /*Дата добавления видеозаписи пользователем или группой в формате Unixtime.*/
        val views: Int = 0,
        /*Количество просмотров видеозаписи.*/
        val local_views: Int = 0,
        /*Если видео внешнее, количество просмотров ВКонтакте.*/
        val comments: Int = 0,
        /*Количество комментариев к видеозаписи.*/
        val player: String = "",
        /*URL страницы с плеером, который можно использовать для воспроизведения ролика в браузере.
        Поддерживается flash и HTML5, плеер всегда масштабируется по размеру окна.*/
        val platform: String = "",
        /*Название платформы (для видеозаписей, добавленных с внешних сайтов).*/
        val can_add: Boolean = true,
        /*Может ли пользователь добавить видеозапись к себе.
        0 — не может добавить.
        1 — может добавить.*/
        val is_private: Boolean = true,
        /*Поле возвращается, если видеозапись приватная
        (например, была загружена в личное сообщение), всегда содержит 1.*/
        val access_key: String = "",
        /*Ключ доступа к объекту. Подробнее см. Ключ доступа к данным access_key.*/
        val processing: Boolean = true,
        /*Поле возвращается в том случае, если видеоролик находится в процессе обработки, всегда содержит 1.*/
        val is_favorite: Boolean = true,
        /*true, если объект добавлен в закладки у текущего пользователя.*/
        val can_comment: Boolean = false,
        /*Может ли пользователь комментировать видео.
        0 — не может комментировать.
        1 — может комментировать.*/
        val can_edit: Boolean = false,
        /*Может ли пользователь редактировать видео.
        0 — не может редактировать.
        1 — может редактировать.*/
        val can_like: Boolean = false,
        /*Может ли пользователь добавить видео в список <<Мне нравится>>.
        0 — не может добавить.
        1 — может добавить.*/
        val can_repost: Boolean = false,
        /*Может ли пользователь сделать репост видео.
        0 — не может сделать репост.
        1 — может сделать репост.*/
        val can_subscribe: Boolean= false,
        /*Может ли пользователь подписаться на автора видео.
        0 — не может подписаться.
        1 — может подписаться.*/
        val can_add_to_faves: Boolean = false,
        /*Может ли пользователь добавить видео в избранное.
        0 — не может добавить.
        1 — может добавить.*/
        val can_attach_link: Boolean = false,
        /*Может ли пользователь прикрепить кнопку действия к видео.
        0 — не может прикрепить.
        1 — может прикрепить.*/
        val width: Int = 0,
        /*Ширина видео.*/
        val height: Int = 0,
        /*Высота видео.*/
        val user_id: Int = 0,
        /*Идентификатор пользователя, загрузившего видео, если оно было загружено в группу одним из участников.*/
        val converting: Boolean = false,
        /*Конвертируется ли видео.
        0 — не конвертируется.
        1 — конвертируется.*/
        val added: Boolean = false,
        /*Добавлено ли видео в альбомы пользователя.
        0 — не добавлено.
        1 — добавлено.*/
        val is_subscribed:Boolean = false,
        /*Подписан ли пользователь на автора видео.
        0 — не подписан.
        1 — подписан.*/
        val repeat: Boolean = true,
        /*Поле возвращается в том случае, если видео зациклено, всегда содержит 1*/
        val type: Type = Type.VIDEO,
        /*Тип видеозаписи. Может принимать значения: video, music_video, movie.*/
        val balance: Int = 0,
        /*Баланс донатов в прямой трансляции.*/
        val live_status: LiveStatus = LiveStatus.WAITING,
        /*Статус прямой трансляции. Может принимать значения: waiting, started, finished, failed, upcoming.*/
        val live: Boolean = true,
        /*Поле возвращается в том случае, если видеозапись является прямой трансляцией, всегда содержит 1.
        Обратите внимание, в этом случае в поле duration содержится значение 0.*/
        val upcoming: Boolean = false,
        /*Поле свидетельствует о том, что трансляция скоро начнётся. Для live =1.*/
        val spectators: Int = 0,
        /*Количество зрителей прямой трансляции.*/
        val likes: LikesVideo? = null,
        /*Содержит объект отметки «Мне нравится».*/
        val reposts: RepostsVideo? = null
        /*Содержит объект репоста.*/
    ):Attachment
}